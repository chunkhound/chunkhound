name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Configure UV cache for consistent builds
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --locked --all-extras --dev
          
      - name: Run linting
        run: |
          uv run ruff check .
          uv run black --check .

      - name: Run type checking
        run: |
          uv run mypy chunkhound/

      - name: Run tests
        run: |
          uv run pytest tests/ -v --tb=short
        env:
          # Mock OpenAI API calls in CI to avoid rate limiting
          OPENAI_API_KEY: "test-key-for-ci"
          # Disable filesystem watcher in CI
          CHUNKHOUND_WATCH_ENABLED: "false"

      - name: Test MCP server functionality
        run: |
          # Test MCP server can start and respond to basic requests
          uv run python -c "
          import asyncio
          from chunkhound.mcp_server import serve
          from chunkhound.database import Database
          
          async def test_server():
              # Basic server initialization test
              db = Database()
              print('MCP server initialization test passed')
          
          asyncio.run(test_server())
          "

      - name: Test CLI functionality
        run: |
          # Test basic CLI operations
          uv run chunkhound --help
          uv run chunkhound index --help
          uv run chunkhound search --help

  build:
    name: Test Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install

      - name: Build package
        run: |
          uv build
          ls -la dist/

      - name: Test package installation
        run: |
          uv pip install dist/*.whl
          python -c "import chunkhound; print('Package import successful')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 30

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'integration-test')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Create test project structure
        run: |
          mkdir -p test_project/src
          cat > test_project/src/example.py << 'EOF'
          def hello_world():
              """Example function for testing."""
              return "Hello, World!"
          
          class ExampleClass:
              """Example class for testing."""
              def __init__(self, name: str):
                  self.name = name
              
              def greet(self) -> str:
                  return f"Hello, {self.name}!"
          EOF
          
          cat > test_project/README.md << 'EOF'
          # Test Project
          
          This is a test project for ChunkHound integration testing.
          
          ## Features
          
          - Example Python code
          - Documentation
          EOF

      - name: Test indexing functionality
        run: |
          cd test_project
          uv run chunkhound index . --no-watch
        env:
          CHUNKHOUND_WATCH_ENABLED: "false"

      - name: Test search functionality
        run: |
          cd test_project
          # Test regex search
          uv run python -c "
          import sys
          sys.path.insert(0, '..')
          from chunkhound.database import Database
          
          db = Database()
          results = db.search_regex('hello_world')
          print(f'Regex search found {len(results)} results')
          assert len(results) > 0, 'Should find hello_world function'
          "
        env:
          CHUNKHOUND_WATCH_ENABLED: "false"

      - name: Minimize uv cache
        run: uv cache prune --ci