name: Status Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [ main, develop ]

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  status-check:
    name: Required Status Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: uv sync --locked --dev

      - name: Quick lint check
        run: |
          echo "🔍 Running quick lint checks..."
          uv run ruff check . --select E,F,W --quiet
          uv run black --check --quiet .

      - name: Type check core modules
        run: |
          echo "🔍 Type checking core modules..."
          uv run mypy chunkhound/cli.py chunkhound/database.py chunkhound/mcp_server.py --quiet

      - name: Quick test run
        run: |
          echo "🧪 Running fast tests..."
          uv run pytest tests/ -x -q --tb=no -m "not slow and not integration"
        env:
          OPENAI_API_KEY: "test-key-for-ci"
          CHUNKHOUND_WATCH_ENABLED: "false"

      - name: Verify package can be built
        run: |
          echo "📦 Verifying package builds..."
          uv build --quiet
          ls -la dist/

  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR size
        run: |
          # Count lines changed in the PR
          base_sha="${{ github.event.pull_request.base.sha }}"
          head_sha="${{ github.event.pull_request.head.sha }}"
          
          lines_added=$(git diff $base_sha..$head_sha --numstat | awk '{sum+=$1} END {print sum+0}')
          lines_deleted=$(git diff $base_sha..$head_sha --numstat | awk '{sum+=$2} END {print sum+0}')
          files_changed=$(git diff $base_sha..$head_sha --name-only | wc -l)
          
          echo "📊 PR Statistics:"
          echo "- Lines added: $lines_added"
          echo "- Lines deleted: $lines_deleted"
          echo "- Files changed: $files_changed"
          
          # Set reasonable limits
          max_lines=2000
          max_files=50
          
          if [ $lines_added -gt $max_lines ]; then
            echo "⚠️ Large PR: $lines_added lines added (limit: $max_lines)"
            echo "Consider breaking this PR into smaller chunks for easier review."
          fi
          
          if [ $files_changed -gt $max_files ]; then
            echo "⚠️ Many files changed: $files_changed files (limit: $max_files)"
            echo "Consider breaking this PR into smaller chunks for easier review."
          fi
          
          echo "✅ PR size check completed"

  security-quick-check:
    name: Quick Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for secrets
        run: |
          echo "🔒 Checking for potential secrets..."
          
          # Check for common secret patterns
          secret_patterns=(
            "api[_-]?key\s*[:=]\s*['\"][^'\"]{10,}['\"]"
            "password\s*[:=]\s*['\"][^'\"]{8,}['\"]"
            "secret\s*[:=]\s*['\"][^'\"]{10,}['\"]"
            "token\s*[:=]\s*['\"][^'\"]{10,}['\"]"
            "['\"][A-Za-z0-9]{32,}['\"]"
          )
          
          found_secrets=false
          for pattern in "${secret_patterns[@]}"; do
            if grep -rE -i "$pattern" --include="*.py" --include="*.yml" --include="*.yaml" --include="*.json" .; then
              echo "❌ Potential secret found matching pattern: $pattern"
              found_secrets=true
            fi
          done
          
          if [ "$found_secrets" = true ]; then
            echo "🚨 Potential secrets detected. Please review and remove any hardcoded credentials."
            exit 1
          else
            echo "✅ No obvious secrets detected"
          fi

      - name: Check file permissions
        run: |
          echo "🔐 Checking file permissions..."
          
          # Check for executable files that shouldn't be
          find . -type f -name "*.py" -executable | while read -r file; do
            echo "⚠️ Python file is executable: $file"
          done
          
          # Check for world-writable files
          find . -type f -perm -002 | while read -r file; do
            echo "⚠️ World-writable file: $file"
          done
          
          echo "✅ File permission check completed"

  branch-protection:
    name: Branch Protection Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'

    steps:
      - name: Verify PR requirements
        run: |
          echo "🛡️ Checking branch protection requirements..."
          
          # Check if PR has a description
          if [ -z "${{ github.event.pull_request.body }}" ]; then
            echo "❌ PR must have a description"
            exit 1
          fi
          
          # Check if PR title follows conventional commits (optional warning)
          title="${{ github.event.pull_request.title }}"
          if ! echo "$title" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|ci|perf|build)(\(.+\))?: .+"; then
            echo "⚠️ PR title doesn't follow conventional commits format"
            echo "   Consider using: type(scope): description"
            echo "   Examples: feat(search): add semantic search, fix(db): resolve connection issue"
          fi
          
          echo "✅ Branch protection checks completed"

  summary:
    name: Status Summary
    runs-on: ubuntu-latest
    needs: [status-check, pr-size-check, security-quick-check]
    if: always()

    steps:
      - name: Status Summary
        run: |
          echo "## 🎯 Status Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.status-check.result }}" = "success" ]; then
            echo "✅ **Core Checks**: All required checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Core Checks**: Some required checks failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.pr-size-check.result }}" = "success" ]; then
            echo "✅ **PR Size**: Within reasonable limits" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **PR Size**: Large PR detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-quick-check.result }}" = "success" ]; then
            echo "✅ **Security**: No obvious issues detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security**: Potential security issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Ready for review**: Basic quality gates passed" >> $GITHUB_STEP_SUMMARY