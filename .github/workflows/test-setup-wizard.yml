name: Setup Wizard PTY Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test-wizard:
    name: Test Setup Wizard
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size - test key combinations
          - os: ubuntu-20.04
            python-version: '3.11'
          - os: macos-latest  
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.11'
    
    runs-on: ${{ matrix.os }}
    
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      
      - name: Install dependencies
        run: |
          uv sync --dev
      
      - name: Install platform-specific PTY dependencies
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows: Install wexpect and pywinpty for ConPTY support
            uv pip install wexpect pywinpty
          else
            # Unix-like: Install pexpect for native PTY support
            uv pip install pexpect
          fi
      
      - name: Run setup wizard PTY tests
        shell: bash
        run: |
          # Set environment variables for consistent testing
          export TERM=xterm-256color
          export PYTHONIOENCODING=utf-8
          export COLUMNS=80
          export LINES=24
          
          # Run the wizard tests with verbose output
          uv run pytest tests/test_setup_wizard_pty.py -v --tb=short --timeout=60
        env:
          # Disable any real API keys to ensure we're testing offline
          OPENAI_API_KEY: ""
          VOYAGE_API_KEY: ""
          # Force English locale
          LC_ALL: en_US.UTF-8
          LANG: en_US.UTF-8
      
      - name: Run compatibility tests
        shell: bash
        run: |
          export TERM=xterm-256color
          export PYTHONIOENCODING=utf-8
          
          uv run pytest tests/test_setup_wizard_compatibility.py -v --tb=short --timeout=60 -m "not slow"
        env:
          LC_ALL: en_US.UTF-8
          LANG: en_US.UTF-8
      
      - name: Run smoke test to verify wizard doesn't break basic functionality
        shell: bash
        run: |
          # Quick smoke test - basic chunkhound commands should work
          uv run chunkhound --help
          uv run chunkhound index --help
        timeout-minutes: 2
      
      - name: Collect test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-artifacts-${{ matrix.os }}-python${{ matrix.python-version }}
          path: |
            /tmp/pytest-*/
            **/test_*.log
            **/.chunkhound.json
            **/.mcp.json
            **/.vscode/mcp.json
            **/.env
          retention-days: 7
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.os }}-python${{ matrix.python-version }}
          path: |
            .pytest_cache/
            **/*.xml
          retention-days: 3

  test-wizard-slow:
    name: Slow Wizard Tests
    runs-on: ubuntu-latest
    needs: test-wizard
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'test-slow')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      
      - name: Install dependencies
        run: |
          uv sync --dev
          uv pip install pexpect
      
      - name: Run slow wizard tests
        run: |
          export TERM=xterm-256color
          export PYTHONIOENCODING=utf-8
          
          uv run pytest tests/test_setup_wizard_compatibility.py -v --tb=short --timeout=120 -m "slow"
        env:
          LC_ALL: en_US.UTF-8

  validate-configs:
    name: Validate Generated Configs
    runs-on: ubuntu-latest
    needs: test-wizard
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      
      - name: Install dependencies
        run: |
          uv sync --dev
          uv pip install pexpect
      
      - name: Generate and validate all provider configs
        run: |
          export TERM=xterm-256color
          export PYTHONIOENCODING=utf-8
          
          # Create a comprehensive validation script
          cat << 'EOF' > validate_all_configs.py
          import tempfile
          import json
          import sys
          from pathlib import Path
          from test_setup_wizard_pty import SetupWizardPTYTest
          
          class ConfigValidator(SetupWizardPTYTest):
              def validate_all_providers(self):
                  providers = [
                      ("OpenAI", "1", "sk-test-key", ""),
                      ("VoyageAI", "2", "voyage-test", "voyage-2"), 
                      ("Ollama", "3", "", "nomic-embed-text"),
                  ]
                  
                  results = []
                  
                  for name, choice, key, model in providers:
                      with tempfile.TemporaryDirectory() as tmp_dir:
                          work_dir = Path(tmp_dir) / f"test_{name.lower()}"
                          work_dir.mkdir()
                          
                          try:
                              wizard = self.spawn_wizard(str(work_dir))
                              
                              wizard.expect("Select embedding provider", timeout=10)
                              wizard.sendline(choice)
                              
                              if choice == "3":  # Ollama
                                  wizard.expect("URL", timeout=5)
                                  wizard.sendline("http://localhost:11434")
                              else:
                                  wizard.expect("API key", timeout=5)
                                  wizard.sendline(key)
                              
                              wizard.expect("model", timeout=5)
                              wizard.sendline(model)
                              
                              if choice != "3":  # Skip reranking for API providers
                                  wizard.expect("Reranking", timeout=5)
                                  wizard.sendline("n")
                              
                              wizard.expect("AI agent", timeout=5)
                              wizard.sendline("0")  # Skip
                              
                              wizard.expect("save", timeout=5)
                              wizard.sendline("y")
                              
                              wizard.expect("successfully", timeout=10)
                              wizard.close()
                              
                              # Validate config
                              config = self.validate_chunkhound_config(work_dir / ".chunkhound.json")
                              results.append((name, "PASS", f"Provider: {config['embedding']['provider']}"))
                              
                          except Exception as e:
                              results.append((name, "FAIL", str(e)))
                  
                  return results
          
          if __name__ == "__main__":
              validator = ConfigValidator()
              results = validator.validate_all_providers()
              
              print("\\n=== CONFIG VALIDATION RESULTS ===")
              all_passed = True
              
              for provider, status, details in results:
                  print(f"{provider:12} {status:6} {details}")
                  if status != "PASS":
                      all_passed = False
              
              if not all_passed:
                  sys.exit(1)
              
              print("\\nAll provider configurations validated successfully!")
          EOF
          
          uv run python validate_all_configs.py